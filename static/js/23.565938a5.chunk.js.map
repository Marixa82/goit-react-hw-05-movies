{"version":3,"file":"static/js/23.565938a5.chunk.js","mappings":"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","sources":["components/HomeItem.jsx","components/HomeList.jsx","components/Searchbar.styled.js","components/MovieSearchForm.jsx","pages/Movies.jsx","services/api.jsx"],"sourcesContent":["import { Link, useLocation } from \"react-router-dom\";\nexport const HomeItem = ({title,name, id}) => {\n const location = useLocation();\n  return (\n      <li >\n            <Link  to={`movies/${id}`} state={{ from: location }}>\n              {title?? name}\n            </Link>  \n            </li>\n)    \n}\n\n","import { HomeItem } from \"./HomeItem\";\n// import {  useLocation } from 'react-router-dom';\nexport const MovieList = ({ movies }) => {\n\n    const visibleMovies = movies.filter(movie => movie.id && movie.title);\n    return (\n        \n        <ul>\n            {visibleMovies.map(movie => (\n                \n                <HomeItem key={movie.id} title={movie.title} />\n            ))}\n        </ul>\n           )\n}\n        \n\n","import styled from '@emotion/styled'\n\nconst SearchbarHead = styled.header`\ntop: 0;\nposition: sticky;\nz-index: 1100;\ndisplay: flex;\njustify-content: center;\nalign-items: center;\nmin-height: 64px;\npadding-right: 24px;\npadding-left: 24px;\npadding-top: 12px;\npadding-bottom: 12px;\ncolor: #fff;\nbackground-color: #3f51b5;\nbox-shadow: 0px 2px 4px 1px rgba(0, 0, 0, 0.2),\n0px 4px 5px 0px rgba(0, 0, 0, 0.14), 0px 1px 10px 0px rgba(0, 0, 0, 0.12);\nleft: 0;\n`\nconst SearchForm = styled.form`\ndisplay: flex;\nalign-items: center;\nwidth: 100%;\nmax-width: 600px;\nbackground-color: #fff;\nborder-radius: 3px;\noverflow: hidden;\n`\nconst SearchFormBtn = styled.button`\ndisplay: inline-block;\nheight: 48px;\nborder: 0;\n\nbackground-size: 40%;\nbackground-repeat: no-repeat;\nbackground-position: center;\nopacity: 0.6;\ntransition: opacity 250ms cubic-bezier(0.4, 0, 0.2, 1);\ncursor: pointer;\noutline: none;\nwidth: 48px;\n&:hover {\nopacity: 1;\n}\n`\nconst SearchFormBtnLabel = styled.span`\nposition: absolute;\nheight: 1px;\npadding: 0;\noverflow: hidden;\nclip: rect(0, 0, 0, 0);\nwhite-space: nowrap;\nclip-path: inset(50%);\nborder: 0;\nwidth: 1px;\n`\nconst SearchFormInput = styled.input`\ndisplay: inline-block;\nfont: inherit;\nfont-size: 20px;\nborder: none;\noutline: none;\npadding-left: 4px;\npadding-right: 4px;\nwidth: 100%;\n&::placeholder {\n    font: inherit;\n    font-size: 18px;\n}\n`\nexport { SearchbarHead, SearchForm, SearchFormBtn, SearchFormInput, SearchFormBtnLabel }","import { toast } from 'react-toastify';\nimport { SearchbarHead, SearchForm,SearchFormBtn, SearchFormBtnLabel,SearchFormInput } from './Searchbar.styled';\nimport { useState } from \"react\";\nimport { ImSearch } from 'react-icons/im';\nimport PropTypes from \"prop-types\";\n\n\n\nexport default function Searchbar ({onSubmit}) { \n    const [searchQuery, setSearchQuery] = useState('')\n    \n    const handleNameChange = event => {\n    setSearchQuery(event.currentTarget.value.toLowerCase());\n    \n  };\n    const handleSubmit = e => {\n        e.preventDefault();\n        if (searchQuery.trim() === '') {\n      toast.info(\"Please! Enter your search query! Ok\");\n            return;\n        }\n        onSubmit(searchQuery)\n        setSearchQuery('')\n    }\n\n    \n        return (\n        <SearchbarHead>\n                <SearchForm onSubmit={handleSubmit} >\n                    <SearchFormBtn type=\"submit\" ><ImSearch style= {{marginRight: 2,marginTop:4,width:25,height:25}}/>\n                   <SearchFormBtnLabel>Search</SearchFormBtnLabel>\n            </SearchFormBtn>\n                    <SearchFormInput\n                    type=\"text\"\n                            name=\"searchQuery\"\n                            value={searchQuery}\n                    onChange={handleNameChange}\n                        autoComplete=\"off\"\n                        autoFocus\n              placeholder=\"Search images and photos\"\n            />\n                </SearchForm>\n            </SearchbarHead>\n          )\n    }\n    \nSearchbar.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n}\n// import { Formik, Form, Field } from 'formik';\n\n// export const MaterialEditorForm = ({\n//   initialValues = { title: '', link: '' },\n//   onSubmit,\n//   btnText,\n// }) => {\n//   const handleSubmit = async (values, actions) => {\n//     await onSubmit(values);\n//     actions.setSubmitting(false);\n//     actions.resetForm();\n//   };\n//   return (\n//     <Formik initialValues={initialValues} onSubmit={handleSubmit}>\n//       {({ isSubmitting }) => (\n//         <Form>\n//           <label>\n//             Описание\n//             <Field name=\"title\" type=\"text\" />\n//           </label>\n//           <br />\n//           <label>\n//             Ссылка\n//             <Field name=\"link\" type=\"text\" />\n//           </label>\n//           <br />\n//           <button type=\"submit\" disabled={isSubmitting}>\n//             {btnText}\n//           </button>\n//         </Form>\n//       )}\n//     </Formik>\n//   );\n// };","import {  useSearchParams } from 'react-router-dom';\nimport { useState, useEffect } from \"react\";\n// import { HomeItem } from 'components/HomeItem';\nimport { MovieList } from 'components/HomeList';\nimport * as API from 'services/api';\nimport Searchbar from 'components/MovieSearchForm';\n// import {  toast } from 'react-toastify';\n\nconst Movies = () => {\n  const [searchParams, setSearchParams] = useSearchParams();\n  const query = searchParams.get('query') ?? '';\n  const [movies, setMovies] = useState([]);\n  // const { movieId } = useParams;\n  const updateQueryString = query => {\n    const nextParams = query.trim() !== '' ? { query } : {};\n    setSearchParams(nextParams);\n    if (query.trim() === '') {\n      setMovies([]);\n    }\n  };\n\nconst searchMovieData = async (searchQuery) => {\n      try {\n        const response = await API.fetchSearchMovieData(searchQuery);\n        setMovies(response)\n      }\n      catch (error) {\n        console.log(error);\n      }\n    }\n\n  useEffect(() => {\n    \n    searchMovieData(query);\n        \n    }, [query]);\n  \n  // const updateQueryString = evt => {\n  //   const query = evt.target.value;\n  //   if (query === '') {\n  //     return setSearchParams({});\n  //   }\n  //   setSearchParams({ movieId: query });\n  // };\n\n\nreturn (\n    <>\n      <Searchbar onSubmit={updateQueryString} />\n      {movies > 0 && <MovieList movies={movies} />}\n    </>\n  );\n};\n\n  // return (\n  //   <>\n  //     <h2>Movie</h2>\n  //     <div>\n  //       <input type=\"text\" value={movieId} onChange={updateQueryString} />\n  //       <button>Search</button>\n        \n       \n  //     </div>\n  //   </>\n  // );\n// };\n\nexport default Movies;\n\n","import axios from \"axios\";\n// const URLCredits = 'https://api.themoviedb.org/3/movie/{movie_id}/credits'\n// PATH PARAMS: {movie_id: ''}\n// const URLReviews = 'https://api.themoviedb.org/3/movie/{movie_id}/reviews'\n// PATH PARAMS: {movie_id: ''}\nconst URL = 'https://api.themoviedb.org/3/';\n// PATH PARAMS: {movie_id: ''}, QUERY PARAMS: {append_to_response: video, image, describe.....}\nexport const URL_IMG = 'https://image.tmdb.org/t/p/';\n// const IMG_BASE_URL = 'https://image.tmdb.org/t/p/';\n// const URLSearch = 'https://api.themoviedb.org/3/search/movie'\nconst KEY = 'aa3953ee8706f4bf1c70825a0873668c';\n\nexport const fetchSearchMovieData = async (searchQuery) => {\n     const searchParams = new URLSearchParams({\n         api_key: KEY,\n         query: searchQuery\n  });\n     try {\n        const response = axios.get(`${URL}search/movie?api_key=${searchParams}`);\n         return response.data;\n        \n    } catch (error) {\n        // Handle errors here\n        console.error('Error fetching search movies:', error);\n        throw error;\n    }\n    }\n// async function fetchCreditsMovieData(id) {\n//   const searchParams = new URLSearchParams({\n//     api_key: KEY,\n//   });\n\n//   const response = await axios.get(\n//     `${URL}movie/${id}/credits?${searchParams}`\n//   );\n\n//   if (response.data.cast) {\n//     return response.data.cast;\n//   }\n//   return Promise.reject(\n//     new Error(`\n//   There are no info about cast for this movie`)\n//   );\n// }\n// // ______________________________________\n// export const fetchMovieDetails = async movieId => {\n//     const res = await axios.get(`${URL}movie/${movieId}?api_key=${KEY}&language=en-US`);\n//     console.log(res.data) ;\n// }\nexport const fetchMovieDetails = async (movieId) => {\n     const searchParams = new URLSearchParams({\n         api_key: KEY,\n         id: movieId,\n  });\n     try {\n        const response = axios.get(`${URL}movie?api_key=${searchParams}`);\n         return response.movieId;\n        \n    } catch (error) {\n        // Handle errors here\n        console.error('Error fetching search movies:', error);\n        throw error;\n    }\n    }\n// export const fetchMovieDetails = (movieId) => {\n//     return axios.get(`${URL}movie/${movieId}?api_key=${KEY}&language=en-US`)\n//         .then(resp => resp.data)\n//         .catch(error => {\n//             console.error('Error fetching credits movies:', error);\n//             throw error;\n//         });\n// };\n// export const fetchCreditsMovieData = async (id) => {\n//     const resp = await axios.get(`${URL}movie/${id}/credits?api_key=${KEY}&language=en-US`);\n//     console.log(resp) ;\n// }\nexport const fetchCreditsMovieData = () => {\n    return axios.get(`${URL}movie/credits?api_key=${KEY}&language=en-US`)\n        .then(resp => resp.data)\n        .catch(error => {\n            console.error('Error fetching credits movies:', error);\n            throw error;\n        });\n};\n\nexport const fetchTrendingMovieDay = () => {\n    return axios.get(`${URL}trending/movie/day?api_key=${KEY}`)\n        .then(response => response.data.results)\n        .catch(error => {\n            console.error('Error fetching trending movies:', error);\n            throw error;\n        });\n};\n// export const fetchTrendingMovieDay = async () => {\n//     const {response} = await axios.get(`${URL}trending/all/day?api_key=${KEY}`);\n//     return response.data.results;\n// }\n// export const fetchDetailsMovie = async movieId => {\n//     const { data } = await axios.get(`${URL}/movie/${movieId}?api_key=${KEY}`);\n//     return data;\n// }\n// const api = { fetchCreditsMovieData };\n// export default api;"],"names":["HomeItem","_ref","title","name","id","location","useLocation","_jsx","children","Link","to","concat","state","from","MovieList","visibleMovies","movies","filter","movie","map","SearchbarHead","styled","_templateObject","_taggedTemplateLiteral","SearchForm","_templateObject2","SearchFormBtn","_templateObject3","SearchFormBtnLabel","_templateObject4","SearchFormInput","_templateObject5","Searchbar","onSubmit","_useState","useState","_useState2","_slicedToArray","searchQuery","setSearchQuery","_jsxs","e","preventDefault","trim","toast","type","ImSearch","style","marginRight","marginTop","width","height","value","onChange","event","currentTarget","toLowerCase","autoComplete","autoFocus","placeholder","_searchParams$get","_useSearchParams","useSearchParams","_useSearchParams2","searchParams","setSearchParams","query","get","setMovies","searchMovieData","_asyncToGenerator","_regeneratorRuntime","mark","_callee","response","wrap","_context","prev","next","API","sent","t0","console","log","stop","_x","apply","arguments","useEffect","_Fragment","nextParams","URL","URL_IMG","KEY","fetchSearchMovieData","URLSearchParams","api_key","axios","abrupt","data","error","fetchMovieDetails","_ref2","_callee2","movieId","_context2","_x2","fetchCreditsMovieData","then","resp","catch","fetchTrendingMovieDay","results"],"sourceRoot":""}